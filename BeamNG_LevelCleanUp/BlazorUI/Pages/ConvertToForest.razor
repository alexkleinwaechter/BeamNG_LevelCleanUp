@page "/ConvertToForest"
@using BeamNG_LevelCleanUp.BlazorUI.Components
@using BeamNG_LevelCleanUp.Communication;
@using BeamNG_LevelCleanUp.Logic;
@using BeamNG_LevelCleanUp.Objects;
@using BeamNG_LevelCleanUp.Utils;
@using Microsoft.AspNetCore.Components.Forms;
@using System.IO.Compression;
@using static BeamNG_LevelCleanUp.Utils.TreeExtensions;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<ErrorBoundary>
    <ChildContent>
        <div class="content">
            <h3>Convert static assets to forest items</h3>
            <MudExpansionPanels @ref="FileSelect">
                <MudExpansionPanel Text="@GetBeamInstallDir()" IsInitiallyExpanded="false">
                    <FileSelectComponent OnFileSelected="SetBeamInstallDir" SelectFolder="true"
                                         Description="The game install directory. If empty some features are missing.">
                    </FileSelectComponent>
                </MudExpansionPanel>
                <MudExpansionPanel Text="@GetFileSelectTitle()" IsInitiallyExpanded="true">
                    <FileSelectComponent OnFileSelected="FileSelected"
                                         Description="Always use a copy of your project."
                                         Disabled="@_fileSelectDisabled">
                    </FileSelectComponent>
                    @if (_vanillaLevels.Any())
                    {
                        <MudSelect T="FileInfo" ToStringFunc="@converter"
                                   ValueChanged="OnVanillaSourceSelected"
                                   Label="Or select a vanilla level" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
                        @foreach (var item in _vanillaLevels)
                            {
                                <MudSelectItem Value="@(item)">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>

            <MudTreeView T="ITree<Asset>" Items="Items" Dense MultiSelection="true" SelectedValuesChanged="OnSelectedValuesChanged">
                <ItemTemplate Context="treeItemAsset">
                    <MudTreeViewItem Items="@treeItemAsset.Children" Value="@treeItemAsset"
                                     Text="@treeItemAsset.Data.Name" @bind-Expanded="@treeItemAsset.IsExpanded"
                    @bind-Selected="@treeItemAsset.IsSelected" />
                </ItemTemplate>
            </MudTreeView>

            <MudDrawer @bind-Open="@_openDrawer" Width="@width" Height="@height" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
                <MudList Clickable="true" Dense="true" DisableGutters="false">
                    @{
                        var list = _showErrorLog ? _errors : _messages;
                        @foreach (var item in list)
                        {
                            <MudListItem @key="@Guid.NewGuid()" Style="border-bottom:1px solid grey">
                                <MudText Typo="Typo.h6">@item</MudText>
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudDrawer>
        </div>
        <footer>
            <MudStack Row="true" Justify="Justify.SpaceEvenly">
                @if (_errors.Any())
                {
                    <MudButton Color="Color.Error" OnClick="@(() => OpenDrawer(Anchor.Bottom, true))">Errors</MudButton>
                }
                @if (_messages.Any())
                {
                    <MudButton Color="Color.Info" OnClick="@(() => OpenDrawer(Anchor.Bottom, false))">Messages</MudButton>
                }
                @if (SelectedValues.Any())
                {
                    <MudButton Color="Color.Primary" OnClick="@ConvertDialog">Convert to Forestitems</MudButton>
                }
                @if (_showDeployButton)
                {
                    <MudSelect Dense T="CompressionLevel" Label="Compression Level" AnchorOrigin="Origin.TopCenter"
                    @bind-Value="_compressionLevel">
                        <MudSelectItem T="CompressionLevel" Value="CompressionLevel.Fastest" />
                        <MudSelectItem T="CompressionLevel" Value="CompressionLevel.NoCompression" />
                        <MudSelectItem T="CompressionLevel" Value="CompressionLevel.Optimal" />
                        <MudSelectItem T="CompressionLevel" Value="CompressionLevel.SmallestSize" />
                    </MudSelect>
                    <MudButton @onclick="ZipAndDeploy" Color="Color.Primary">Build Zipfile</MudButton>
                }
            </MudStack>
            @if (!string.IsNullOrEmpty(ZipFileHandler.WorkingDirectory))
            {
                <MudButton @onclick="ZipFileHandler.OpenExplorer" StartIcon="@Icons.Material.Filled.FolderOpen" Variant="Variant.Text" Color="Color.Primary">Working Directory: @ZipFileHandler.WorkingDirectory</MudButton>
            }
        </footer>
    </ChildContent>
    <ErrorContent>
        <CustomErrorContent />
    </ErrorContent>
</ErrorBoundary>

@code {

    private string _levelName { get; set; }
    private string _levelPath { get; set; }
    private string _beamLogFilePath { get; set; } = string.Empty;
    private List<string> _missingFiles { get; set; } = new List<string>();
    private List<string> _errors { get; set; } = new List<string>();
    private List<string> _messages { get; set; } = new List<string>();
    private Snackbar _staticSnackbar;
    private BeamFileReader Reader { get; set; }
    private string _fileSelectTitle = "Select your zipped level you want to give a new name";
    private bool _fileSelectDisabled { get; set; }
    private bool _fileSelectExpanded { get; set; }
    private bool _openDrawer;
    private Anchor _anchor;
    private string width, height;
    private List<GridFileListItem> BindingListDelete { get; set; } = new List<GridFileListItem>();
    private HashSet<GridFileListItem> _selectedItems = new HashSet<GridFileListItem>();
    private bool _fixed_Header = true;
    private MudExpansionPanels? FileSelect { get; set; }
    private string _searchString = string.Empty;
    private string _labelFileSummaryShrink { get; set; } = String.Empty;
    private bool _showDeployButton { get; set; }
    private CompressionLevel _compressionLevel { get; set; } = CompressionLevel.Optimal;
    bool _showErrorLog { get; set; }
    private List<FileInfo> _vanillaLevels { get; set; } = new List<FileInfo>();
    private FileInfo _vanillaLevelSourceSelected { get; set; }
    private string _beamInstallDir { get; set; }
    public ITree<Asset> VirtualRootNode { get; set; } = default!;
    private HashSet<ITree<Asset>> Items { get; set; } = new HashSet<ITree<Asset>>();
    public List<Asset> SelectedValues { get; set; } = new List<Asset>();

    protected async Task FileSelected(string file)
    {
        FileSelect?.CollapseAll();
        _labelFileSummaryShrink = string.Empty;
        _fileSelectDisabled = true;
        _levelName = null;
        _levelPath = null;
        _beamLogFilePath = null;
        _missingFiles = new List<string>();
        _errors = new List<string>();
        _messages = new List<string>();
        _openDrawer = false;
        BindingListDelete = new List<GridFileListItem>();
        _showDeployButton = false;

        if (string.IsNullOrEmpty(ZipFileHandler.WorkingDirectory))
        {
            ZipFileHandler.WorkingDirectory = Path.GetDirectoryName(file);
        }

        await Task.Run(() =>
        {
            try
            {
                _staticSnackbar = Snackbar.Add("Unzipping level...", Severity.Normal, config =>
                {
                    config.VisibleStateDuration = int.MaxValue;
                });
                _levelPath = ZipFileHandler.ExtractToDirectory(Path.Join(ZipFileHandler.WorkingDirectory, Path.GetFileName(file)), "_unpacked");
                Snackbar.Add("Unzipping finished", Severity.Success);
                Snackbar.Remove(_staticSnackbar);
            }
            catch (Exception ex)
            {
                ShowException(ex);
                _fileSelectDisabled = false;
            }

        });
        await Task.Run(() =>
            {
                Reader = new BeamFileReader(_levelPath, string.Empty);
                _levelName = Reader.GetLevelName();
                var assets = Reader.ReadForConvertToForest();
                BuildTreeView(assets);
            });
        _fileSelectDisabled = false;
    }

    protected void BuildTreeView(List<Asset> assets)
    {
        VirtualRootNode = assets.ToTree((parent, child) => child.__parent == parent.Name, new List<Asset>());
        Items = VirtualRootNode.Children;
        //Items = VirtualRootNode.Children.Where(_ => _.HasChildren == true).ToHashSet<ITree<Asset>>();
    }

    protected void OnSelectedValuesChanged(HashSet<ITree<Asset>> values)
    {
        SelectedValues = values.Flatten(x => x.Children)
        .Select(_ => _.Data)
        .Where(_ => _.Class == "TSStatic")
        .Distinct()
        .ToList();

    }

    protected void SetBeamInstallDir(string file)
    {
        if (file != Steam.BeamInstallDir)
        {
            Steam.BeamInstallDir = file;
            GetVanillaLevels();
        }
    }

    protected string GetBeamInstallDir()
    {
        if (Steam.BeamInstallDir != _beamInstallDir)
        {
            _beamInstallDir = Steam.GetBeamInstallDir();
            GetVanillaLevels();
        }
        return "BeamNG install directory: " + _beamInstallDir;

    }

    Func<FileInfo, string> converter = p => p?.Name;

    protected async Task OnVanillaSourceSelected(FileInfo file)
    {
        //InitializeVariables();
        SetDefaultWorkingDirectory();
        _vanillaLevelSourceSelected = file;
        var target = Path.Join(ZipFileHandler.WorkingDirectory, _vanillaLevelSourceSelected.Name);
        PubSubChannel.SendMessage(false, $"Copy {_vanillaLevelSourceSelected.Name} to {target}");
        File.Copy(_vanillaLevelSourceSelected.FullName, target, true);
        _fileSelectDisabled = false;
        await FileSelected(target);
    }

    private void GetVanillaLevels()
    {
        if (!string.IsNullOrEmpty(_beamInstallDir))
        {
            var dir = Path.Join(Steam.BeamInstallDir, Constants.BeamMapPath);
            try
            {
                _vanillaLevels = Directory.GetFiles(dir).Select(x => new FileInfo(x)).ToList();
                StateHasChanged();
            }
            catch (Exception ex)
            {
            }
        }
    }

    public void SetDefaultWorkingDirectory()
    {
        if (string.IsNullOrEmpty(ZipFileHandler.WorkingDirectory) || _vanillaLevelSourceSelected != null)
        {
            ZipFileHandler.WorkingDirectory = Path.Join(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "BeamNgMT");
            Directory.CreateDirectory(ZipFileHandler.WorkingDirectory);
        }
    }

    protected override void OnInitialized()
    {
        CheckPreviousLevel();
        var consumer = Task.Run(async () =>
        {
            while (!StaticVariables.ApplicationExitRequest && await PubSubChannel.ch.Reader.WaitToReadAsync())
            {
                var msg = await PubSubChannel.ch.Reader.ReadAsync();
                if (!_messages.Contains(msg.Message) && !_errors.Contains(msg.Message))
                {
                    if (!msg.IsError)
                    {
                        _messages.Add(msg.Message);
                        Snackbar.Add(msg.Message, Severity.Info);
                    }
                    else
                    {
                        _errors.Add(msg.Message);
                        Snackbar.Add(msg.Message, Severity.Error);
                    }
                }
                //Thread.Sleep(TimeSpan.FromSeconds(1));
            }
        });
    }

    void CheckPreviousLevel()
    {
        var bfr = new BeamFileReader();
        _levelName = bfr.GetLevelName();
        _levelPath = bfr.GetLevelPath();
        if (!string.IsNullOrEmpty(_levelName) && !string.IsNullOrEmpty(_levelPath))
        {
            _staticSnackbar
                = Snackbar.Add($"The level {_levelName} is still loaded. You can either rename it now or load another level for renaming.",
                Severity.Info);
        }
        else
        {
            _fileSelectExpanded = true;
        }
    }

    void OpenDrawer(Anchor anchor, bool isError)
    {
        _showErrorLog = isError;
        _openDrawer = true;
        this._anchor = anchor;

        switch (anchor)
        {
            case Anchor.Start:
                width = "300px";
                height = "100%";
                break;
            case Anchor.End:
                width = "400px";
                height = "100%";
                break;
            case Anchor.Bottom:
                width = "100%";
                height = "200px";
                break;
            case Anchor.Top:
                width = "100%";
                height = "350px";
                break;
        }
    }

    private void ShowException(Exception ex)
    {
        var message = ex.InnerException != null ? ex.Message + $" {ex.InnerException}" : ex.Message;
        Snackbar.Add(message, Severity.Error);
        _errors.Add(message);

    }

    private string GetFileSelectTitle()
    {
        if (!string.IsNullOrEmpty(_levelName))
        {
            return $"{_fileSelectTitle} > {_levelName}";
        }
        else
        {
            return $"{_fileSelectTitle}";
        }
    }

    private async Task ConvertDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to convert the selected static assets to forest items? Please always use a copy of your project with this tool!");
        parameters.Add("ButtonText", "Convert to forest items");
        parameters.Add("Color", Color.Warning);
        var dialog = await DialogService.ShowAsync<SimpleDialog>("Convert assets", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await Task.Run(() =>
                {
                    Reader.ConvertToForest(SelectedValues);
                });
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
            await DeleteDialog();
            _showDeployButton = true;
            SelectedValues.Clear();
            Items.Clear();
            PubSubChannel.SendMessage(false, $"Conversion done! You can build your deployment file now.");
        }
    }

    private async Task DeleteDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you want to to delete the static assets from the missiongroups? If not you have the assets duplicated. One in the tree and one as forestitem.");
        parameters.Add("ButtonText", "Delete from Missiongroups");
        parameters.Add("Color", Color.Warning);
        var dialog = await DialogService.ShowAsync<SimpleDialog>("Deleete assets from Missiongroups", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await Task.Run(() =>
                {
                    Reader.DeleteFromMissiongroups(SelectedValues);
                });
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }
    }


    private async Task ZipAndDeploy()
    {
        var path = string.Empty;
        if (!string.IsNullOrEmpty(_levelPath))
        {
            try
            {
                path = ZipFileHandler.GetLastUnpackedPath();
                _staticSnackbar = Snackbar.Add($"Zipping the deployment file. Please be patient.", Severity.Normal, config =>
                {
                    config.VisibleStateDuration = int.MaxValue;
                });
                await Task.Run(() =>
                {
                    ZipFileHandler.BuildDeploymentFile(path, _levelName, _compressionLevel);
                });
                Snackbar.Remove(_staticSnackbar);
            }
            catch (Exception ex)
            {
                ShowException(ex);
            }
        }
    }
}

